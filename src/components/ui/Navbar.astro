---
import { getLangFromUrl } from '@/i18n/utils'
import ThemeToggle from './ThemeToggle.astro'
import LanguageToggle from './LanguageToggle.astro'

const lang = getLangFromUrl(Astro.url)

const navItems = [
  {
    title: lang === 'es' ? 'Experiencia' : 'Experience',
    label: 'experience',
    url: `/${lang}/#experience`,
  },
  {
    title: lang === 'es' ? 'Proyectos' : 'Projects',
    label: 'projects',
    url: `/${lang}/#projects`,
  },
  {
    title: lang === 'es' ? 'Sobre m√≠' : 'About me',
    label: 'about-me',
    url: `/${lang}/#about-me`,
  },
  {
    title: lang === 'es' ? 'Habilidades' : 'Skills',
    label: 'skills',
    url: `/${lang}/#skills`,
  }
]
---

<header
  class='fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2'
>
  <nav
    class='flex px-1 md:px-3 text-xs md:text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center'
  >
    {navItems.map((link) => (
      <a
        class='relative block py-1 px-1 md:py-2 md:px-2 transition hover:text-yellow-500 dark:hover:text-purple-700'
        aria-label={link.label}
        href={link.url}
      >
        {link.title}
      </a>
    ))}
    
    <ThemeToggle />
    <LanguageToggle />
  </nav>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    const sections = document.querySelectorAll('section')
    const navItems = document.querySelectorAll('header nav a')

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            const isDark = document.documentElement.classList[0] === 'dark'
            
            if (item.getAttribute('aria-label') == entry.target.id) {
              if (isDark) {
                item.classList.add('text-purple-700')
              } else {
                item.classList.add('text-yellow-500')
              }
            } else {
              if (isDark) {
                item.classList.remove('text-purple-700')
              } else {
                item.classList.remove('text-yellow-500')
              }
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    document.onvisibilitychange = () => {
      if (document.visibilityState === 'hidden') {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
    }
  }
</style>
